pool:
  vmImage: 'Ubuntu 16.04'
#Your build pipeline references a secret variable named ‘sp_username’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘sp_password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘sp_tenantid’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘subscription_id’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    architecture: 'x64'   


- task: PythonScript@0
  displayName: 'Run a Python script'
  inputs:
      scriptSource: inline
      script: |
        import os
        import os.path
        os.environ
        print("Starting...")
        print(os.environ)
        print(os.getenv('sp_tenantid'))
        print(os.getenv('test'))
        print("Finishing.....")



#       if not os.path.exists(mocha_reportfile):
#           print("##vso[task.logissue type=error;]No test report file was found at {}.".format(mocha_reportfile))

# - script: | 
#    import os
#    os.environ
#    #os.getenv
#    echo "Printing build variable values"
#    #echo os.getenv('sp_tenantid')
#    #echo os.getenv('test')
   
   



# - task: Bash@3
#   displayName: 'Install Requirements'
#   inputs:
#     targetType: filePath
#     filePath: 'environment_setup/install_requirements.sh'
#     workingDirectory: 'environment_setup'

# - script: | 
#    az login --service-principal -u $(sp_username) -p $(sp_password) --tenant $(sp_tenantid)
   
#   displayName: 'Login to Azure'

# - script: |
#    sed -i 's#"subscription_id": "<>"#"subscription_id": "$(subscription_id)"#g' aml_config/config.json
   
#   displayName: 'replace subscription value'

# - script: 'pytest tests/unit/data_test.py'
#   displayName: 'Data Quality Check'

# - script: 'python aml_service/00-WorkSpace.py'
#   displayName: 'Get or Create workspace copy'

# - script: 'python aml_service/10-TrainOnLocal.py'
#   displayName: 'Train on Local'

# - script: 'python aml_service/15-EvaluateModel.py'
#   displayName: 'Evaluate Model'

# - script: 'python aml_service/20-RegisterModel.py'
#   displayName: 'Register Model'

# - script: 'python aml_service/30-CreateScoringImage.py'
#   displayName: 'Creating scoring image'

# - task: CopyFiles@2
#   displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)'
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'
#     Contents: '**'

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Artifact: devops-for-ai'
#   inputs:
#     ArtifactName: 'devops-for-ai'
#     publishLocation: 'container'
#     pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
#     TargetPath: '$(Build.ArtifactStagingDirectory)'


